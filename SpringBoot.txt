For adding our own username and password in springboot using springboot-security

add this into application.properties

spring.security.user.name=naveen
spring.security.user.password=naveen

this is a bad practise

for this purpose we use SpringSecurity separate class for assigning more users,passwords and roles according to our requiremnet

@EnableWebSecurity
public class CustomSecurityConfig extends WebSecuritConfigAdapter
{

@override
configure(AuthenticationManagerBuilder auth)
{
auth.inmemoryAuthentication().
withUser("user")
.password("pass")
.roles("USER")
.AND()
withUser("ADMIN")
.password("pass")
.roles("ADMIN")
}

for avoiding password encoding error

@Bean
public PasswordEncoder getPasswordEncoder()
{
return NoOpPasswordEncoder.getInstance();
}


}

https://www.youtube.com/watch?v=DhBqC_Vy28o

Global exception handling
https://www.youtube.com/watch?v=hLlGAQ5NfTE

**********************************************************
Here's a configuration class supplying bean metadata to an IoC container:

@Configuration
@ComponentScan(basePackageClasses = Company.class)
public class Config {
    @Bean
    public Address getAddress() {
        return new Address("High Street", 1000);
    }
}



Design patterns
Factory Design pattern
A Factory Pattern or Factory Method Pattern says that just define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate. In other words, subclasses are responsible to create the instance of the class.

Builder Design patterns
Builder Pattern says that "construct a complex object from simple objects using step-by-step approach"

It is mostly used when object can't be created in single step like in the de-serialization of a complex object.



Singleton Pattern
class Singleton
{
    private static Singleton obj;
 
    // private constructor to force use of
    // getInstance() to create Singleton object
    private Singleton() {}
 
    public static Singleton getInstance()
    {
        if (obj==null)
            obj = new Singleton();
        return obj;
    }
}

https://www.geeksforgeeks.org/singleton-design-pattern/